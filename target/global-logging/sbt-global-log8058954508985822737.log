[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\OLESLA~1\AppData\Local\Temp\idea1.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\OLESLA~1\AppData\Local\Temp\idea1.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.6.2 (Oracle Corporation Java 15.0.1)
[debug]       Load.loadUnit: plugins took 128.2521ms
[debug]       Load.loadUnit: defsScala took 0.3819ms
[debug] [Loading] Scanning directory C:\Users\Oleslav Boychuk\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Oleslav Boychuk\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 23.1603 ms
[debug]           Load.resolveProject(global-plugins) took 65.0939ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\Oleslav Boychuk\.sbt\1.0\plugins, plugins: List(<none>))) took 121.6017ms
[debug] [Loading] Done in C:\Users\Oleslav Boychuk\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 152.8123ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.4443ms
[debug]     Load.loadUnit(file:/C:/Users/Oleslav%20Boychuk/.sbt/1.0/plugins/, ...) took 295.82ms
[debug]   Load.apply: load took 483.2814ms
[debug]   Load.apply: resolveProjects took 7.5252ms
[debug]   Load.apply: finalTransforms took 69.1528ms
[debug]   Load.apply: config.delegates took 9.3282ms
[debug]   Load.apply: Def.make(settings)... took 446.8676ms
[debug]   Load.apply: structureIndex took 147.6777ms
[debug]   Load.apply: mkStreams took 1.6458ms
[info] loading global plugins from C:\Users\Oleslav Boychuk\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 3004.5495ms
[debug]           Load.loadUnit: plugins took 33.1903ms
[debug]           Load.loadUnit: defsScala took 0.0061ms
[debug] [Loading] Scanning directory C:\dev\scala_dev\RestorantHttp\RestorantHttp\project
[debug]             Load.loadUnit: mkEval took 5.378ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\dev\scala_dev\RestorantHttp\RestorantHttp\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 2.3129 ms
[info] loading settings for project restoranthttp-build from plugins.sbt,idea1.sbt ...
[debug]               Load.resolveProject(restoranthttp-build) took 11.6908ms
[debug]             Load.loadTransitive: finalizeProject(Project(id restoranthttp-build, base: C:\dev\scala_dev\RestorantHttp\RestorantHttp\project, plugins: List(<none>))) took 14.7462ms
[debug] [Loading] Done in C:\dev\scala_dev\RestorantHttp\RestorantHttp\project, returning: (restoranthttp-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 2618.8942ms
[debug]           Load.loadUnit: cleanEvalClasses took 12.5211ms
[debug]         Load.loadUnit(file:/C:/dev/scala_dev/RestorantHttp/RestorantHttp/project/, ...) took 2665.7835ms
[debug]       Load.apply: load took 2668.1684ms
[debug]       Load.apply: resolveProjects took 0.1789ms
[debug]       Load.apply: finalTransforms took 17.4978ms
[debug]       Load.apply: config.delegates took 0.6648ms
[debug]       Load.apply: Def.make(settings)... took 105.5892ms
[debug]       Load.apply: structureIndex took 49.5231ms
[debug]       Load.apply: mkStreams took 0.0101ms
[info] loading project definition from C:\dev\scala_dev\RestorantHttp\RestorantHttp\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 6693.1175ms
[debug]     Load.loadUnit: defsScala took 0.0039ms
[debug] [Loading] Scanning directory C:\dev\scala_dev\RestorantHttp\RestorantHttp
[debug]       Load.loadUnit: mkEval took 0.2805ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbtide.ConfigPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 3.4159 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 30.6593ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\dev\scala_dev\RestorantHttp\RestorantHttp, configurations: List(it), plugins: List(<none>))) took 36.0046ms
[debug] [Loading] Done in C:\dev\scala_dev\RestorantHttp\RestorantHttp, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 1334.8535ms
[debug]     Load.loadUnit: cleanEvalClasses took 5.299ms
[debug]   Load.loadUnit(file:/C:/dev/scala_dev/RestorantHttp/RestorantHttp/, ...) took 8034.2207ms
[debug] Load.apply: load took 8036.0373ms
[debug] Load.apply: resolveProjects took 0.1693ms
[debug] Load.apply: finalTransforms took 39.7162ms
[debug] Load.apply: config.delegates took 0.7103ms
[debug] Load.apply: Def.make(settings)... took 83.5589ms
[debug] Load.apply: structureIndex took 32.4333ms
[debug] Load.apply: mkStreams took 0.0028ms
[info] set current project to Restaurant Feedback System (in build file:/C:/dev/scala_dev/RestorantHttp/RestorantHttp/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 59612 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 59612, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to Restaurant Feedback System (in build file:/C:/dev/scala_dev/RestorantHttp/RestorantHttp/)
[debug] > Exec(idea-shell, None, None)
